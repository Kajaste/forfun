##
# Compile using ISO C99 mode, error checking and coverage information.
##

$ gcc -c reverse.c -Wall -Wextra -Werror -std=c99 -fprofile-arcs -ftest-coverage
$ gcc -c reverse_test.c -Wall -Wextra -Werror -std=c99
$ gcc -o reverse_test reverse.o reverse_test.o -fprofile-arcs


##
# Run tests in memory checker.
# Silly arg to malloc is used to test allocation failures.
##

$ valgrind --leak-check=full --track-origins=yes ./reverse_test
==19350== Memcheck, a memory error detector
==19350== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==19350== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==19350== Command: ./reverse_test
==19350== 
[pass] test_reverse '(null)' vs '(null)'
[pass] test_reverse '' vs ''
[pass] test_reverse '1' vs '1'
[pass] test_reverse '21' vs '21'
[pass] test_reverse '321' vs '321'
[pass] test_reverse '654321' vs '654321'
[pass] test_reverse '7654321' vs '7654321'
[pass] test_reverse_copy '(null)' vs '(null)'
[pass] test_reverse_copy '(null)' vs '(null)'
[pass] test_reverse_copy '' vs ''
==19350== Warning: silly arg (-1) to malloc()
[pass] test_reverse_copy '(null)' vs '(null)'
[pass] test_reverse_copy '1' vs '1'
==19350== Warning: silly arg (-1) to malloc()
[pass] test_reverse_copy '(null)' vs '(null)'
[pass] test_reverse_copy '21' vs '21'
==19350== Warning: silly arg (-1) to malloc()
[pass] test_reverse_copy '(null)' vs '(null)'
[pass] test_reverse_copy '321' vs '321'
==19350== Warning: silly arg (-1) to malloc()
[pass] test_reverse_copy '(null)' vs '(null)'
[pass] test_reverse_copy '654321' vs '654321'
==19350== Warning: silly arg (-1) to malloc()
[pass] test_reverse_copy '(null)' vs '(null)'
[pass] test_reverse_copy '7654321' vs '7654321'
==19350== Warning: silly arg (-1) to malloc()
[pass] test_reverse_copy '(null)' vs '(null)'
[pass] test_partial '321456' vs '321456'
[pass] test_partial_copy '321' vs '321'
Tests passed!
==19350== 
==19350== HEAP SUMMARY:
==19350==     in use at exit: 0 bytes in 0 blocks
==19350==   total heap usage: 15 allocs, 15 frees, 629 bytes allocated
==19350== 
==19350== All heap blocks were freed -- no leaks are possible
==19350== 
==19350== For counts of detected and suppressed errors, rerun with: -v
==19350== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


##
# Check coverage. In case it was not 100.00 %, the reverse.c.gcov file
# would reveal the uncovered lines and branches.
##

$ gcov -b reverse.c
File 'reverse.c'
Lines executed:100.00% of 23
Branches executed:100.00% of 14
Taken at least once:100.00% of 14
Calls executed:100.00% of 2
Creating 'reverse.c.gcov'
